@page "/"
@inject ILocalStorageService _localstorage;

<PageTitle>Eat my entire ass</PageTitle>

<div class="row p-3 bg-light bg-body-secondary">
    <div class="col-12 col-lg-6 text-center text-lg-end">
        <p class="fs-1 mb-0">
            Entire asses eaten:
            <strong>
                @assesEaten
            </strong>
        </p>
    </div>
    <div class="col-12 col-lg-6 text-center text-lg-start">
        <p class="fs-1 mb-0">
            <button class="btn btn-primary" title="What the hell is this?" @onclick="OnShowModalClick">
                What is this?
            </button>
        </p>
    </div>
</div>

<div class="vstack justify-content-center align-content-center text-center py-5 my-5" @onclick="EatPiece">
        <p class="display-4 fw-light text-center mb-0">
            Eat my entire ass!
        </p>
        <p class="fs-6">
            @if(piecesEaten < pieces.Count()-1)
            {
                @: (click to <strong>eat</strong> ass)
            }
            else
            {
                @: (click to <strong>finish</strong> ass)
            }
            <br/>
            <img class="img-fluid" src="/images/@pieces[piecesEaten]" width="600" />
        </p>
    </div>


<Modal @ref="modal"IsVerticallyCentered="true">
    <HeaderTemplate>
        <h5 class="modal-title text-peach">
            <span class="fa-layers fa-fw me-3">
                <i class="fas fa-circle" data-fa-transform="left-3"></i>
                <i class="fas fa-circle" data-fa-transform="right-3"></i>
                <i class="fas fa-circle text-dark" data-fa-transform="shrink-12"></i>
            </span>
            Butt why?
        </h5>
    </HeaderTemplate>
    <BodyTemplate>
        Don't ask. Eat ass.
        <div class="hstack justify-content-end">
            <Button Color="ButtonColor.Primary" @onclick="CloseThanEatPiece">
                Ok <i class="fas fa-teeth-open ms-3"></i>
            </Button>
        </div>
    </BodyTemplate>
</Modal>

@code {
    Modal modal;

    int assesEaten = 0;
    int piecesEaten = 0;

    List<string> pieces = new()
    {
        "entire_ass.png",
        "chunk1.png",
        "chunk2.png",
        "chunk3.png",
        "chunk4.png",
        "chunk5.png",
        "chunk6.png",
        "chunk7.png",
        "chunk8.png",
        "chunk9.png",
        "chunk10.png",
        "chunk11.png",
        "chunk12.png",
        "hole.png",
    };

    async Task LoadDataAsync(string username)
    {
        var localAssesEaten = await _localstorage.GetItemAsStringAsync($"{username}_assesEaten");
        if (!string.IsNullOrWhiteSpace(localAssesEaten))
        {
            assesEaten = Int32.Parse(localAssesEaten);
        }
    }

    async Task SaveDataAsync(string username)
    {
        _localstorage.SetItemAsync($"{username}_assesEaten", assesEaten);
    }

    void EatPiece()
    {
        if(piecesEaten == 13)
        {
            piecesEaten = 0;
            ++assesEaten;
        }
        else
        {
            ++piecesEaten;
        }
    }

    async Task OnShowModalClick()
    {
        await modal?.ShowAsync();
    }

    async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }

    async Task CloseThanEatPiece()
    {
        await modal?.HideAsync();
        EatPiece();
    }
}