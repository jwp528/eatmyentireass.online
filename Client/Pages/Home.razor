@page "/"
@using BlazorApp.Client.Components
@using BlazorApp.Client.Services
@inject ILocalStorageService _localstorage
@inject IJSRuntime js
@inject ILeaderboardService LeaderboardService

<PageTitle>Eat my entire ass</PageTitle>

<div class="game-container">
    <Navbar OnShowAboutDialog="ShowAboutDialog" />

    <div class="container-fluid px-0">
        <div class="row p-3 min-vh-100 align-items-start justify-content-center">
            <div class="col-12 col-md-10 col-lg-8 text-center py-4">
                
                <!-- Actions Bar -->
                <div class="actions-bar mb-4 d-flex justify-content-center align-items-center gap-3">
                    <button class="btn-fab" @onclick="ShowHelpDialog" title="How to Play">
                        <i class="fas fa-book-open"></i>
                    </button>
                    <button class="btn-fab" @onclick="ShowLeaderboardDialog" title="Leaderboard">
                        <i class="fas fa-trophy"></i>
                    </button>
                    <button class="btn-fab @(playSounds ? "btn-fab-active" : "")" @onclick="ToggleSound" title="@(playSounds ? "Sound On" : "Sound Off")">
                        <i class="@(playSounds ? "fas fa-volume-up" : "fas fa-volume-mute")"></i>
                    </button>
                </div>

                <div class="game-header mb-4">
                    <h1 class="game-title display-3 fw-bold mb-3">Eat my entire ass!</h1>
                    <div class="timer @(GameTimeInSeconds <= 10 && GameTimeInSeconds > 0 ? "timer-warning" : "")">@TimerDisplay</div>
                </div>
                
                <div class="game-display p-3 p-md-4 mx-0 mx-md-2" @onclick="EatPiece" role="button" tabindex="0">
                    <AssImageDisplay piecesEaten="@piecesEaten" AssFrames="@AssFrames" CurrentAssType="@CurrentAssType" />
                </div>
                
                @if (!gamePlaying)
                {
                    @if (assesEaten > 0)
                    {
                        <div class="game-results mt-4">
                            <div class="d-flex flex-column flex-md-row justify-content-center align-items-center gap-2 gap-md-3">
                                <p class="fs-4 mb-2 mb-md-0">Final Score: @Math.Truncate(assesEaten)</p>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-outline-primary btn-sm btn-md" @onclick="() => ResultsDialog?.Modal?.Show()">
                                        <i class="fas fa-trophy me-2"></i>View Details
                                    </button>
                                    <button class="btn btn-primary btn-sm btn-md" @onclick="TryAgain">
                                        <i class="fas fa-rotate me-2"></i>Play Again
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="start-prompt mt-4">
                            <p class="fs-4">Click the ass to start!</p>
                        </div>
                    }
                }else{
                    <div class="start-prompt mt-4">
                        <p class="fs-4">CONSUME!</p>
                    </div>
                }

                <!-- Built By line -->
                <div class="built-by mt-3 text-center">
                    <small class="text-muted d-flex align-items-center justify-content-center gap-2">
                        Built By: 
                        <a href="https://joshparsons.ca" target="_blank" rel="noopener noreferrer" class="text-decoration-none d-flex align-items-center gap-1">
                            <img src="https://www.joshparsons.ca/img/Logo.svg" alt="Josh Parsons Logo" width="20" height="20" />
                            <span class="text-white">Josh Parsons</span>
                        </a>
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

<HelpModal @ref="HelpDialog" CarouselItems="@CarouselItems" />
<AboutModal @ref="AboutDialog" />
<ResultsModal @ref="ResultsDialog" assesEaten="@assesEaten" totalClicks="@totalClicks" scoreText="@scoreText" AssTypes="@Breakdown.Keys.ToList()" Breakdown="@Breakdown" OnTryAgain="TryAgain" OnSaveScore="ShowSaveScoreDialog" />
<LeaderboardModal @ref="LeaderboardDialog" />
<SaveScoreModal @ref="SaveScoreDialog" OnScoreSaved="OnScoreSaved" />

@code {
    LeaderboardModal? LeaderboardDialog;
    SaveScoreModal? SaveScoreDialog;
    
    // Make totalClicks accessible in the template
    public int totalClicks = 0;

    async Task ShowLeaderboardDialog()
    {
        await LeaderboardDialog?.Show();
    }

    async Task ShowSaveScoreDialog()
    {
        await SaveScoreDialog?.Show(assesEaten, totalClicks, Breakdown);
    }

    async Task OnScoreSaved()
    {
        // After score is saved, show the results dialog
        await ResultsDialog?.Modal?.Show();
        StateHasChanged();
    }
}
