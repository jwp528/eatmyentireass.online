@* BootstrapCarousel.razor *@
@using System.Timers
@typeparam TItem

<div id="@Id" class="carousel slide" data-bs-ride="carousel">
    @if (ShowIndicators)
    {
        <div class="carousel-indicators">
            @for (var i = 0; i < Items.Count; i++)
            {
                <button type="button" data-bs-target="#@Id" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")" aria-current="@(i == 0 ? "true" : "false")" aria-label="Slide @(i + 1)"></button>
            }
        </div>
    }
    <div class="carousel-inner w-75 mx-auto">
        @for (var i = 0; i < Items.Count; i++)
        {
            <div class="carousel-item @(i == 0 ? "active" : "")">
                @ItemTemplate(Items[i])
            </div>
        }
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#@Id" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#@Id" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>
</div>

@code {
    [Parameter] 
    public string Id { get; set; }

    [Parameter] 
    public bool ShowIndicators { get; set; } = true;

    [Parameter]
    public List<TItem> Items { get; set; }

    [Parameter] 
    public RenderFragment<TItem> ItemTemplate { get; set; }

    protected override void OnInitialized()
    {
        if (Items == null || !Items.Any())
        {
            throw new InvalidOperationException("Items parameter cannot be null or empty.");
        }
    }
}
