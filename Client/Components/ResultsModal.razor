@using static BlazorApp.Shared.Assets

@code {
    [Parameter] public double assesEaten { get; set; }
    [Parameter] public int totalClicks { get; set; }
    [Parameter] public string scoreText { get; set; } = string.Empty;
    [Parameter] public List<AssTypeEnum> AssTypes { get; set; } = new();
    [Parameter] public Dictionary<AssTypeEnum, int> Breakdown { get; set; } = new();
    [Parameter] public EventCallback OnTryAgain { get; set; }
    [Parameter] public EventCallback OnSaveScore { get; set; }

    public BSModal? Modal;
}

<BSModal @ref="Modal" Id="resultsModal" IsVerticallyCentered="true" Title="Results" Size="ModalSize.Large">
    <Header>
        <h5 class="modal-title">
            <i class="fas fa-trophy me-2 text-warning"></i>
            Game Complete!
        </h5>
    </Header>
    <Body>
        <div class="results-container">
            <!-- Score Summary Card -->
            <div class="score-summary-card">
                <div class="text-center">
                    <div class="score-display mb-2">
                        <span class="score-number">@Math.Truncate(assesEaten)</span>
                        <span class="score-label">Asses Devoured</span>
                    </div>
                    
                    <!-- Compact Performance Stats -->
                    <div class="performance-stats-compact mb-3">
                        <div class="stat-compact">
                            <i class="fas fa-mouse-pointer text-primary"></i>
                            <span class="stat-value">@totalClicks</span>
                            <span class="stat-label">Clicks</span>
                        </div>
                        <div class="stat-compact">
                            <i class="fas fa-bullseye text-success"></i>
                            <span class="stat-value">@(totalClicks > 0 ? Math.Round(assesEaten / totalClicks, 3) : 0)</span>
                            <span class="stat-label">Efficiency</span>
                        </div>
                        <div class="stat-compact">
                            <i class="fas fa-star text-warning"></i>
                            <span class="stat-value">@(totalClicks > 0 ? Math.Round((assesEaten / totalClicks) * 100, 1) : 0)%</span>
                            <span class="stat-label">Success</span>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(scoreText))
                    {
                        <div class="score-message mb-3">
                            <em>@scoreText</em>
                        </div>
                    }

                    <!-- Action Buttons -->
                    <div class="action-buttons">
                        <button type="button" class="btn btn-success btn-sm me-2" @onclick="() => OnSaveScore.InvokeAsync()">
                            <i class="fas fa-save me-1"></i>Save Score
                        </button>
                        <button type="button" class="btn btn-secondary btn-sm" @onclick="() => Modal?.Hide()">
                            <i class="fas fa-times me-1"></i>Close
                        </button>
                    </div>
                </div>
            </div>

            <!-- Compact Breakdown Section -->
            <div class="breakdown-section-compact">
                <h6 class="section-title mb-2">
                    <i class="fas fa-chart-bar me-1"></i>
                    Breakdown by Type
                </h6>
                
                <div class="breakdown-grid-compact">
                    @foreach(var ass in AssTypes.OrderByDescending(a => Breakdown[a]))
                    {
                        var totalConsumed = AssTypes.Sum(a => Breakdown[a]);
                        var percentage = totalConsumed > 0 ? Math.Round((double)Breakdown[ass] / totalConsumed * 100, 1) : 0;
                        
                        <div class="breakdown-item-compact">
                            <div class="breakdown-content">
                                <img src="/images/Asses/@ass.ToString()/entire_ass.png" class="breakdown-icon-compact" alt="@ass" />
                                <div class="breakdown-details">
                                    <div class="breakdown-name-compact">@ass</div>
                                    <div class="breakdown-stats-compact">
                                        <span class="badge bg-primary badge-sm">@Breakdown[ass]</span>
                                        <span class="percentage-text">@percentage%</span>
                                    </div>
                                </div>
                                <div class="breakdown-bar-compact">
                                    <div class="progress progress-thin">
                                        <div class="progress-bar bg-primary" role="progressbar" style="width: @percentage%" aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </Body>
</BSModal>
